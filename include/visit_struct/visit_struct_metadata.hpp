//  Copyright (C) 2023 Andrei Pastramagiu

//  Distributed under the Boost Software License, Version 1.0. (See accompanying
//  file LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef VISIT_STRUCT_METADATA_HPP_INCLUDED
#define VISIT_STRUCT_METADATA_HPP_INCLUDED

#include <visit_struct/visit_struct.hpp>

namespace visit_struct {

#define METADATA(x, ...) x, (__VA_ARGS__)

/*** Generated code ***/

/* no prelude */

#define VISIT_STRUCT_APPLYF2_2(f,_1,_2) f(_1,_2)
#define VISIT_STRUCT_APPLYF4_2(f,_1,_2,_3,_4) f(_1,_2) f(_3,_4)
#define VISIT_STRUCT_APPLYF6_2(f,_1,_2,_3,_4,_5,_6) f(_1,_2) f(_3,_4) f(_5,_6)
#define VISIT_STRUCT_APPLYF8_2(f,_1,_2,_3,_4,_5,_6,_7,_8) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8)
#define VISIT_STRUCT_APPLYF10_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10)
#define VISIT_STRUCT_APPLYF12_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12)
#define VISIT_STRUCT_APPLYF14_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14)
#define VISIT_STRUCT_APPLYF16_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16)
#define VISIT_STRUCT_APPLYF18_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18)
#define VISIT_STRUCT_APPLYF20_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20)
#define VISIT_STRUCT_APPLYF22_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22)
#define VISIT_STRUCT_APPLYF24_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24)
#define VISIT_STRUCT_APPLYF26_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26)
#define VISIT_STRUCT_APPLYF28_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28)
#define VISIT_STRUCT_APPLYF30_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30)
#define VISIT_STRUCT_APPLYF32_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32)
#define VISIT_STRUCT_APPLYF34_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34)
#define VISIT_STRUCT_APPLYF36_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34) f(_35,_36)
#define VISIT_STRUCT_APPLYF38_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34) f(_35,_36) f(_37,_38)
#define VISIT_STRUCT_APPLYF40_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34) f(_35,_36) f(_37,_38) f(_39,_40)
#define VISIT_STRUCT_APPLYF42_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34) f(_35,_36) f(_37,_38) f(_39,_40) f(_41,_42)
#define VISIT_STRUCT_APPLYF44_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34) f(_35,_36) f(_37,_38) f(_39,_40) f(_41,_42) f(_43,_44)
#define VISIT_STRUCT_APPLYF46_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34) f(_35,_36) f(_37,_38) f(_39,_40) f(_41,_42) f(_43,_44) f(_45,_46)
#define VISIT_STRUCT_APPLYF48_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34) f(_35,_36) f(_37,_38) f(_39,_40) f(_41,_42) f(_43,_44) f(_45,_46) f(_47,_48)
#define VISIT_STRUCT_APPLYF50_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34) f(_35,_36) f(_37,_38) f(_39,_40) f(_41,_42) f(_43,_44) f(_45,_46) f(_47,_48) f(_49,_50)
#define VISIT_STRUCT_APPLYF52_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34) f(_35,_36) f(_37,_38) f(_39,_40) f(_41,_42) f(_43,_44) f(_45,_46) f(_47,_48) f(_49,_50) f(_51,_52)
#define VISIT_STRUCT_APPLYF54_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34) f(_35,_36) f(_37,_38) f(_39,_40) f(_41,_42) f(_43,_44) f(_45,_46) f(_47,_48) f(_49,_50) f(_51,_52) f(_53,_54)
#define VISIT_STRUCT_APPLYF56_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34) f(_35,_36) f(_37,_38) f(_39,_40) f(_41,_42) f(_43,_44) f(_45,_46) f(_47,_48) f(_49,_50) f(_51,_52) f(_53,_54) f(_55,_56)    
#define VISIT_STRUCT_APPLYF58_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34) f(_35,_36) f(_37,_38) f(_39,_40) f(_41,_42) f(_43,_44) f(_45,_46) f(_47,_48) f(_49,_50) f(_51,_52) f(_53,_54) f(_55,_56) f(_57,_58)
#define VISIT_STRUCT_APPLYF60_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34) f(_35,_36) f(_37,_38) f(_39,_40) f(_41,_42) f(_43,_44) f(_45,_46) f(_47,_48) f(_49,_50) f(_51,_52) f(_53,_54) f(_55,_56) f(_57,_58) f(_59,_60)
#define VISIT_STRUCT_APPLYF62_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34) f(_35,_36) f(_37,_38) f(_39,_40) f(_41,_42) f(_43,_44) f(_45,_46) f(_47,_48) f(_49,_50) f(_51,_52) f(_53,_54) f(_55,_56) f(_57,_58) f(_59,_60) f(_61,_62)
#define VISIT_STRUCT_APPLYF64_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34) f(_35,_36) f(_37,_38) f(_39,_40) f(_41,_42) f(_43,_44) f(_45,_46) f(_47,_48) f(_49,_50) f(_51,_52) f(_53,_54) f(_55,_56) f(_57,_58) f(_59,_60) f(_61,_62) f(_63,_64)
#define VISIT_STRUCT_APPLYF66_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34) f(_35,_36) f(_37,_38) f(_39,_40) f(_41,_42) f(_43,_44) f(_45,_46) f(_47,_48) f(_49,_50) f(_51,_52) f(_53,_54) f(_55,_56) f(_57,_58) f(_59,_60) f(_61,_62) f(_63,_64) f(_65,_66)
#define VISIT_STRUCT_APPLYF68_2(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68) f(_1,_2) f(_3,_4) f(_5,_6) f(_7,_8) f(_9,_10) f(_11,_12) f(_13,_14) f(_15,_16) f(_17,_18) f(_19,_20) f(_21,_22) f(_23,_24) f(_25,_26) f(_27,_28) f(_29,_30) f(_31,_32) f(_33,_34) f(_35,_36) f(_37,_38) f(_39,_40) f(_41,_42) f(_43,_44) f(_45,_46) f(_47,_48) f(_49,_50) f(_51,_52) f(_53,_54) f(_55,_56) f(_57,_58) f(_59,_60) f(_61,_62) f(_63,_64) f(_65,_66) f(_67,_68)

#define VISIT_STRUCT_PP_MAP_2(f, ...) VISIT_STRUCT_EXPAND(VISIT_STRUCT_APPLY_F_(VISIT_STRUCT_CONCAT(VISIT_STRUCT_CONCAT(VISIT_STRUCT_APPLYF, VISIT_STRUCT_PP_NARG(__VA_ARGS__)),_2), f, __VA_ARGS__))

/*** End generated code ***/

/***
 * These macros are used with VISIT_STRUCT_PP_MAP_2
 */

#define VISIT_STRUCT_FIELD_COUNT_METADATA(MEMBER_NAME, METADATA)                                                      \
  + 1

#define VISIT_STRUCT_MEMBER_HELPER_METADATA(MEMBER_NAME, METADATA)                                                    \
  std::forward<V>(visitor)(#MEMBER_NAME, std::forward<S>(struct_instance).MEMBER_NAME, METADATA);

#define VISIT_STRUCT_MEMBER_HELPER_PTR_METADATA(MEMBER_NAME, METADATA)                                                \
  std::forward<V>(visitor)(#MEMBER_NAME, &this_type::MEMBER_NAME);

#define VISIT_STRUCT_MEMBER_HELPER_TYPE_METADATA(MEMBER_NAME, METADATA)                                               \
  std::forward<V>(visitor)(#MEMBER_NAME, visit_struct::type_c<decltype(this_type::MEMBER_NAME)>{});

#define VISIT_STRUCT_MEMBER_HELPER_ACC_METADATA(MEMBER_NAME, METADATA)                                                \
  std::forward<V>(visitor)(#MEMBER_NAME, visit_struct::accessor<decltype(&this_type::MEMBER_NAME), &this_type::MEMBER_NAME>{});

#define VISIT_STRUCT_MEMBER_HELPER_PAIR_METADATA(MEMBER_NAME, METADATA)                                               \
  std::forward<V>(visitor)(#MEMBER_NAME, std::forward<S1>(s1).MEMBER_NAME, std::forward<S2>(s2).MEMBER_NAME);


#define VISITABLE_STRUCT_METADATA(STRUCT_NAME, ...)                                                \
namespace visit_struct {                                                                           \
namespace traits {                                                                                 \
                                                                                                   \
template <>                                                                                        \
struct visitable<STRUCT_NAME, void> {                                                              \
                                                                                                   \
  using this_type = STRUCT_NAME;                                                                   \
                                                                                                   \
  static constexpr auto get_name()                                                                 \
    -> decltype(#STRUCT_NAME) {                                                                    \
    return #STRUCT_NAME;                                                                           \
  }                                                                                                \
                                                                                                   \
  static constexpr const std::size_t field_count = 0                                               \
    VISIT_STRUCT_PP_MAP_2(VISIT_STRUCT_FIELD_COUNT_METADATA, __VA_ARGS__);                         \
                                                                                                   \
  template <typename V, typename S>                                                                \
  constexpr static void apply(V && visitor, S && struct_instance)                                  \
  {                                                                                                \
    VISIT_STRUCT_PP_MAP_2(VISIT_STRUCT_MEMBER_HELPER_METADATA, __VA_ARGS__)                        \
  }                                                                                                \
                                                                                                   \
  template <typename V, typename S1, typename S2>                                                  \
  constexpr static void apply(V && visitor, S1 && s1, S2 && s2)                                    \
  {                                                                                                \
    VISIT_STRUCT_PP_MAP_2(VISIT_STRUCT_MEMBER_HELPER_PAIR_METADATA, __VA_ARGS__)                   \
  }                                                                                                \
                                                                                                   \
  template <typename V>                                                                            \
  constexpr static void visit_pointers(V && visitor)                                               \
  {                                                                                                \
    VISIT_STRUCT_PP_MAP_2(VISIT_STRUCT_MEMBER_HELPER_PTR_METADATA, __VA_ARGS__)                    \
  }                                                                                                \
                                                                                                   \
  template <typename V>                                                                            \
  constexpr static void visit_types(V && visitor)                                                  \
  {                                                                                                \
    VISIT_STRUCT_PP_MAP_2(VISIT_STRUCT_MEMBER_HELPER_TYPE_METADATA, __VA_ARGS__)                   \
  }                                                                                                \
                                                                                                   \
  template <typename V>                                                                            \
  constexpr static void visit_accessors(V && visitor)                                              \
  {                                                                                                \
    VISIT_STRUCT_PP_MAP_2(VISIT_STRUCT_MEMBER_HELPER_ACC_METADATA, __VA_ARGS__)                    \
  }                                                                                                \
                                                                                                   \
  static constexpr const bool value = true;                                                        \
};                                                                                                 \
                                                                                                   \
}                                                                                                  \
}                                                                                                  \
static_assert(true, "")

} // end namespace visit_struct

#endif // VISIT_STRUCT_METADATA_HPP_INCLUDED
